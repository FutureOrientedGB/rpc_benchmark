// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bidirectional.proto

#include "bidirectional.pb.h"
#include "bidirectional.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace bidirectional {

static const char* BidirectionalService_method_names[] = {
  "/bidirectional.BidirectionalService/send_message",
  "/bidirectional.BidirectionalService/send_stream",
};

std::unique_ptr< BidirectionalService::Stub> BidirectionalService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BidirectionalService::Stub> stub(new BidirectionalService::Stub(channel, options));
  return stub;
}

BidirectionalService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_send_message_(BidirectionalService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_send_stream_(BidirectionalService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status BidirectionalService::Stub::send_message(::grpc::ClientContext* context, const ::bidirectional::MessageRequest& request, ::bidirectional::MessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bidirectional::MessageRequest, ::bidirectional::MessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_send_message_, context, request, response);
}

void BidirectionalService::Stub::async::send_message(::grpc::ClientContext* context, const ::bidirectional::MessageRequest* request, ::bidirectional::MessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bidirectional::MessageRequest, ::bidirectional::MessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_message_, context, request, response, std::move(f));
}

void BidirectionalService::Stub::async::send_message(::grpc::ClientContext* context, const ::bidirectional::MessageRequest* request, ::bidirectional::MessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_send_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bidirectional::MessageResponse>* BidirectionalService::Stub::PrepareAsyncsend_messageRaw(::grpc::ClientContext* context, const ::bidirectional::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bidirectional::MessageResponse, ::bidirectional::MessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_send_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bidirectional::MessageResponse>* BidirectionalService::Stub::Asyncsend_messageRaw(::grpc::ClientContext* context, const ::bidirectional::MessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsend_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::bidirectional::StreamRequest, ::bidirectional::StreamResponse>* BidirectionalService::Stub::send_streamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::bidirectional::StreamRequest, ::bidirectional::StreamResponse>::Create(channel_.get(), rpcmethod_send_stream_, context);
}

void BidirectionalService::Stub::async::send_stream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::bidirectional::StreamRequest,::bidirectional::StreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::bidirectional::StreamRequest,::bidirectional::StreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_send_stream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::bidirectional::StreamRequest, ::bidirectional::StreamResponse>* BidirectionalService::Stub::Asyncsend_streamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::bidirectional::StreamRequest, ::bidirectional::StreamResponse>::Create(channel_.get(), cq, rpcmethod_send_stream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::bidirectional::StreamRequest, ::bidirectional::StreamResponse>* BidirectionalService::Stub::PrepareAsyncsend_streamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::bidirectional::StreamRequest, ::bidirectional::StreamResponse>::Create(channel_.get(), cq, rpcmethod_send_stream_, context, false, nullptr);
}

BidirectionalService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BidirectionalService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BidirectionalService::Service, ::bidirectional::MessageRequest, ::bidirectional::MessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BidirectionalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bidirectional::MessageRequest* req,
             ::bidirectional::MessageResponse* resp) {
               return service->send_message(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BidirectionalService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< BidirectionalService::Service, ::bidirectional::StreamRequest, ::bidirectional::StreamResponse>(
          [](BidirectionalService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::bidirectional::StreamResponse,
             ::bidirectional::StreamRequest>* stream) {
               return service->send_stream(ctx, stream);
             }, this)));
}

BidirectionalService::Service::~Service() {
}

::grpc::Status BidirectionalService::Service::send_message(::grpc::ServerContext* context, const ::bidirectional::MessageRequest* request, ::bidirectional::MessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BidirectionalService::Service::send_stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::bidirectional::StreamResponse, ::bidirectional::StreamRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bidirectional

