/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "bidirectional_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace bidirectional {


MessageRequest::~MessageRequest() noexcept {
}


void MessageRequest::__set_version(const int32_t val) {
  this->version = val;
}

void MessageRequest::__set_text(const std::string& val) {
  this->text = val;
}

void MessageRequest::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const MessageRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MessageRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MessageRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageRequest &a, MessageRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.text, b.text);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

MessageRequest::MessageRequest(const MessageRequest& other0) {
  version = other0.version;
  text = other0.text;
  content = other0.content;
  __isset = other0.__isset;
}
MessageRequest& MessageRequest::operator=(const MessageRequest& other1) {
  version = other1.version;
  text = other1.text;
  content = other1.content;
  __isset = other1.__isset;
  return *this;
}
void MessageRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MessageRequest(";
  out << "version=" << to_string(version);
  out << ", " << "text=" << to_string(text);
  out << ", " << "content=" << to_string(content);
  out << ")";
}


MessageResponse::~MessageResponse() noexcept {
}


void MessageResponse::__set_version(const int32_t val) {
  this->version = val;
}

void MessageResponse::__set_text(const std::string& val) {
  this->text = val;
}

void MessageResponse::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const MessageResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MessageResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MessageResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MessageResponse");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MessageResponse &a, MessageResponse &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.text, b.text);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

MessageResponse::MessageResponse(const MessageResponse& other2) {
  version = other2.version;
  text = other2.text;
  content = other2.content;
  __isset = other2.__isset;
}
MessageResponse& MessageResponse::operator=(const MessageResponse& other3) {
  version = other3.version;
  text = other3.text;
  content = other3.content;
  __isset = other3.__isset;
  return *this;
}
void MessageResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MessageResponse(";
  out << "version=" << to_string(version);
  out << ", " << "text=" << to_string(text);
  out << ", " << "content=" << to_string(content);
  out << ")";
}


StreamRequest::~StreamRequest() noexcept {
}


void StreamRequest::__set_version(const int32_t val) {
  this->version = val;
}

void StreamRequest::__set_text(const std::string& val) {
  this->text = val;
}

void StreamRequest::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const StreamRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StreamRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StreamRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StreamRequest");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StreamRequest &a, StreamRequest &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.text, b.text);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

StreamRequest::StreamRequest(const StreamRequest& other4) {
  version = other4.version;
  text = other4.text;
  content = other4.content;
  __isset = other4.__isset;
}
StreamRequest& StreamRequest::operator=(const StreamRequest& other5) {
  version = other5.version;
  text = other5.text;
  content = other5.content;
  __isset = other5.__isset;
  return *this;
}
void StreamRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StreamRequest(";
  out << "version=" << to_string(version);
  out << ", " << "text=" << to_string(text);
  out << ", " << "content=" << to_string(content);
  out << ")";
}


StreamResponse::~StreamResponse() noexcept {
}


void StreamResponse::__set_version(const int32_t val) {
  this->version = val;
}

void StreamResponse::__set_text(const std::string& val) {
  this->text = val;
}

void StreamResponse::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const StreamResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StreamResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StreamResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StreamResponse");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StreamResponse &a, StreamResponse &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.text, b.text);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

StreamResponse::StreamResponse(const StreamResponse& other6) {
  version = other6.version;
  text = other6.text;
  content = other6.content;
  __isset = other6.__isset;
}
StreamResponse& StreamResponse::operator=(const StreamResponse& other7) {
  version = other7.version;
  text = other7.text;
  content = other7.content;
  __isset = other7.__isset;
  return *this;
}
void StreamResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StreamResponse(";
  out << "version=" << to_string(version);
  out << ", " << "text=" << to_string(text);
  out << ", " << "content=" << to_string(content);
  out << ")";
}

} // namespace
