/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BidirectionalService_H
#define BidirectionalService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "bidirectional_types.h"

namespace bidirectional {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BidirectionalServiceIf {
 public:
  virtual ~BidirectionalServiceIf() {}
  virtual void send_message(MessageResponse& _return, const MessageRequest& request) = 0;
  virtual void send_stream(StreamResponse& _return, const StreamRequest& request) = 0;
};

class BidirectionalServiceIfFactory {
 public:
  typedef BidirectionalServiceIf Handler;

  virtual ~BidirectionalServiceIfFactory() {}

  virtual BidirectionalServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BidirectionalServiceIf* /* handler */) = 0;
  };

class BidirectionalServiceIfSingletonFactory : virtual public BidirectionalServiceIfFactory {
 public:
  BidirectionalServiceIfSingletonFactory(const ::std::shared_ptr<BidirectionalServiceIf>& iface) : iface_(iface) {}
  virtual ~BidirectionalServiceIfSingletonFactory() {}

  virtual BidirectionalServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(BidirectionalServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<BidirectionalServiceIf> iface_;
};

class BidirectionalServiceNull : virtual public BidirectionalServiceIf {
 public:
  virtual ~BidirectionalServiceNull() {}
  void send_message(MessageResponse& /* _return */, const MessageRequest& /* request */) override {
    return;
  }
  void send_stream(StreamResponse& /* _return */, const StreamRequest& /* request */) override {
    return;
  }
};

typedef struct _BidirectionalService_send_message_args__isset {
  _BidirectionalService_send_message_args__isset() : request(false) {}
  bool request :1;
} _BidirectionalService_send_message_args__isset;

class BidirectionalService_send_message_args {
 public:

  BidirectionalService_send_message_args(const BidirectionalService_send_message_args&);
  BidirectionalService_send_message_args& operator=(const BidirectionalService_send_message_args&);
  BidirectionalService_send_message_args() noexcept {
  }

  virtual ~BidirectionalService_send_message_args() noexcept;
  MessageRequest request;

  _BidirectionalService_send_message_args__isset __isset;

  void __set_request(const MessageRequest& val);

  bool operator == (const BidirectionalService_send_message_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BidirectionalService_send_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BidirectionalService_send_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BidirectionalService_send_message_pargs {
 public:


  virtual ~BidirectionalService_send_message_pargs() noexcept;
  const MessageRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BidirectionalService_send_message_result__isset {
  _BidirectionalService_send_message_result__isset() : success(false) {}
  bool success :1;
} _BidirectionalService_send_message_result__isset;

class BidirectionalService_send_message_result {
 public:

  BidirectionalService_send_message_result(const BidirectionalService_send_message_result&);
  BidirectionalService_send_message_result& operator=(const BidirectionalService_send_message_result&);
  BidirectionalService_send_message_result() noexcept {
  }

  virtual ~BidirectionalService_send_message_result() noexcept;
  MessageResponse success;

  _BidirectionalService_send_message_result__isset __isset;

  void __set_success(const MessageResponse& val);

  bool operator == (const BidirectionalService_send_message_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BidirectionalService_send_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BidirectionalService_send_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BidirectionalService_send_message_presult__isset {
  _BidirectionalService_send_message_presult__isset() : success(false) {}
  bool success :1;
} _BidirectionalService_send_message_presult__isset;

class BidirectionalService_send_message_presult {
 public:


  virtual ~BidirectionalService_send_message_presult() noexcept;
  MessageResponse* success;

  _BidirectionalService_send_message_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BidirectionalService_send_stream_args__isset {
  _BidirectionalService_send_stream_args__isset() : request(false) {}
  bool request :1;
} _BidirectionalService_send_stream_args__isset;

class BidirectionalService_send_stream_args {
 public:

  BidirectionalService_send_stream_args(const BidirectionalService_send_stream_args&);
  BidirectionalService_send_stream_args& operator=(const BidirectionalService_send_stream_args&);
  BidirectionalService_send_stream_args() noexcept {
  }

  virtual ~BidirectionalService_send_stream_args() noexcept;
  StreamRequest request;

  _BidirectionalService_send_stream_args__isset __isset;

  void __set_request(const StreamRequest& val);

  bool operator == (const BidirectionalService_send_stream_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const BidirectionalService_send_stream_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BidirectionalService_send_stream_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BidirectionalService_send_stream_pargs {
 public:


  virtual ~BidirectionalService_send_stream_pargs() noexcept;
  const StreamRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BidirectionalService_send_stream_result__isset {
  _BidirectionalService_send_stream_result__isset() : success(false) {}
  bool success :1;
} _BidirectionalService_send_stream_result__isset;

class BidirectionalService_send_stream_result {
 public:

  BidirectionalService_send_stream_result(const BidirectionalService_send_stream_result&);
  BidirectionalService_send_stream_result& operator=(const BidirectionalService_send_stream_result&);
  BidirectionalService_send_stream_result() noexcept {
  }

  virtual ~BidirectionalService_send_stream_result() noexcept;
  StreamResponse success;

  _BidirectionalService_send_stream_result__isset __isset;

  void __set_success(const StreamResponse& val);

  bool operator == (const BidirectionalService_send_stream_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BidirectionalService_send_stream_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BidirectionalService_send_stream_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BidirectionalService_send_stream_presult__isset {
  _BidirectionalService_send_stream_presult__isset() : success(false) {}
  bool success :1;
} _BidirectionalService_send_stream_presult__isset;

class BidirectionalService_send_stream_presult {
 public:


  virtual ~BidirectionalService_send_stream_presult() noexcept;
  StreamResponse* success;

  _BidirectionalService_send_stream_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BidirectionalServiceClient : virtual public BidirectionalServiceIf {
 public:
  BidirectionalServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BidirectionalServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_message(MessageResponse& _return, const MessageRequest& request) override;
  void send_send_message(const MessageRequest& request);
  void recv_send_message(MessageResponse& _return);
  void send_stream(StreamResponse& _return, const StreamRequest& request) override;
  void send_send_stream(const StreamRequest& request);
  void recv_send_stream(StreamResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BidirectionalServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<BidirectionalServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (BidirectionalServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_send_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send_stream(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BidirectionalServiceProcessor(::std::shared_ptr<BidirectionalServiceIf> iface) :
    iface_(iface) {
    processMap_["send_message"] = &BidirectionalServiceProcessor::process_send_message;
    processMap_["send_stream"] = &BidirectionalServiceProcessor::process_send_stream;
  }

  virtual ~BidirectionalServiceProcessor() {}
};

class BidirectionalServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BidirectionalServiceProcessorFactory(const ::std::shared_ptr< BidirectionalServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< BidirectionalServiceIfFactory > handlerFactory_;
};

class BidirectionalServiceMultiface : virtual public BidirectionalServiceIf {
 public:
  BidirectionalServiceMultiface(std::vector<std::shared_ptr<BidirectionalServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BidirectionalServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<BidirectionalServiceIf> > ifaces_;
  BidirectionalServiceMultiface() {}
  void add(::std::shared_ptr<BidirectionalServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void send_message(MessageResponse& _return, const MessageRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_message(_return, request);
    }
    ifaces_[i]->send_message(_return, request);
    return;
  }

  void send_stream(StreamResponse& _return, const StreamRequest& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_stream(_return, request);
    }
    ifaces_[i]->send_stream(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BidirectionalServiceConcurrentClient : virtual public BidirectionalServiceIf {
 public:
  BidirectionalServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  BidirectionalServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_message(MessageResponse& _return, const MessageRequest& request) override;
  int32_t send_send_message(const MessageRequest& request);
  void recv_send_message(MessageResponse& _return, const int32_t seqid);
  void send_stream(StreamResponse& _return, const StreamRequest& request) override;
  int32_t send_send_stream(const StreamRequest& request);
  void recv_send_stream(StreamResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
