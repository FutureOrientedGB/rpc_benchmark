/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef bidirectional_TYPES_H
#define bidirectional_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace bidirectional {

class MessageRequest;

class MessageResponse;

class StreamRequest;

class StreamResponse;

typedef struct _MessageRequest__isset {
  _MessageRequest__isset() : version(false), text(false), content(false) {}
  bool version :1;
  bool text :1;
  bool content :1;
} _MessageRequest__isset;

class MessageRequest : public virtual ::apache::thrift::TBase {
 public:

  MessageRequest(const MessageRequest&);
  MessageRequest& operator=(const MessageRequest&);
  MessageRequest() noexcept
                 : version(0),
                   text(),
                   content() {
  }

  virtual ~MessageRequest() noexcept;
  int32_t version;
  std::string text;
  std::string content;

  _MessageRequest__isset __isset;

  void __set_version(const int32_t val);

  void __set_text(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const MessageRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MessageRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageRequest &a, MessageRequest &b);

std::ostream& operator<<(std::ostream& out, const MessageRequest& obj);

typedef struct _MessageResponse__isset {
  _MessageResponse__isset() : version(false), text(false), content(false) {}
  bool version :1;
  bool text :1;
  bool content :1;
} _MessageResponse__isset;

class MessageResponse : public virtual ::apache::thrift::TBase {
 public:

  MessageResponse(const MessageResponse&);
  MessageResponse& operator=(const MessageResponse&);
  MessageResponse() noexcept
                  : version(0),
                    text(),
                    content() {
  }

  virtual ~MessageResponse() noexcept;
  int32_t version;
  std::string text;
  std::string content;

  _MessageResponse__isset __isset;

  void __set_version(const int32_t val);

  void __set_text(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const MessageResponse & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const MessageResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(MessageResponse &a, MessageResponse &b);

std::ostream& operator<<(std::ostream& out, const MessageResponse& obj);

typedef struct _StreamRequest__isset {
  _StreamRequest__isset() : version(false), text(false), content(false) {}
  bool version :1;
  bool text :1;
  bool content :1;
} _StreamRequest__isset;

class StreamRequest : public virtual ::apache::thrift::TBase {
 public:

  StreamRequest(const StreamRequest&);
  StreamRequest& operator=(const StreamRequest&);
  StreamRequest() noexcept
                : version(0),
                  text(),
                  content() {
  }

  virtual ~StreamRequest() noexcept;
  int32_t version;
  std::string text;
  std::string content;

  _StreamRequest__isset __isset;

  void __set_version(const int32_t val);

  void __set_text(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const StreamRequest & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const StreamRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StreamRequest &a, StreamRequest &b);

std::ostream& operator<<(std::ostream& out, const StreamRequest& obj);

typedef struct _StreamResponse__isset {
  _StreamResponse__isset() : version(false), text(false), content(false) {}
  bool version :1;
  bool text :1;
  bool content :1;
} _StreamResponse__isset;

class StreamResponse : public virtual ::apache::thrift::TBase {
 public:

  StreamResponse(const StreamResponse&);
  StreamResponse& operator=(const StreamResponse&);
  StreamResponse() noexcept
                 : version(0),
                   text(),
                   content() {
  }

  virtual ~StreamResponse() noexcept;
  int32_t version;
  std::string text;
  std::string content;

  _StreamResponse__isset __isset;

  void __set_version(const int32_t val);

  void __set_text(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const StreamResponse & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const StreamResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StreamResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StreamResponse &a, StreamResponse &b);

std::ostream& operator<<(std::ostream& out, const StreamResponse& obj);

} // namespace

#endif
